
//------------------------------------------------------------------------------
//-- Conveyor inside
//------------------------------------------------------------------------------

//
//
//            LOAD COMPONENTS
//
//




//------------------------------------------------------------------------------
//-- Controller manager
//------------------------------------------------------------------------------
loadComponent("ConvScheme", "conman::Scheme");
setActivity("ConvScheme", 0.002, 5, ORO_SCHED_RT);
ConvScheme.loadService("rosparam")
ConvScheme.rosparam.getAll()
ConvScheme.loadService("conman_ros")
ConvScheme.configure()


loadComponent("ConvSupervisor","ConvSupervisor")
setActivity("ConvSupervisor", 0.1, 4, ORO_SCHED_RT);
ConvSupervisor.loadService("rosparam")
ConvSupervisor.rosparam.getAll()
ConvSupervisor.configure()


loadComponent("ConvDiag", "Irp6Diagnostic")
setActivity("ConvDiag", 0.1, 1, ORO_SCHED_RT)
ConvDiag.loadService("rosparam");
ConvDiag.rosparam.getAll();
ConvDiag.configure()





loadComponent("ConveyorLimitDetector","LimitDetector")
ConveyorLimitDetector.loadService("rosparam")
ConveyorLimitDetector.rosparam.getAll()
ConveyorLimitDetector.rosparam.getParam("~/ConveyorMotorParameters/upper_limits", "upper_limits")
ConveyorLimitDetector.rosparam.getParam("~/ConveyorMotorParameters/lower_limits", "lower_limits")
ConveyorLimitDetector.configure()


// Motors Regulators


loadComponent("ConveyorRegulator","IRp6Regulator")
ConveyorRegulator.loadService("rosparam")
ConveyorRegulator.rosparam.getAll()
ConveyorRegulator.configure()


// Conveyor double port spliter

loadComponent("ConveyorPortDoubleSplit_hw_cp","PortDoubleSplit")
ConveyorPortDoubleSplit_hw_cp.loadService("rosparam")
ConveyorPortDoubleSplit_hw_cp.rosparam.getAll()
ConveyorPortDoubleSplit_hw_cp.configure()


// Conveyor double port aggregate

loadComponent("ConveyorPortDoubleAggregate_hw_p","PortDoubleAggregate")
ConveyorPortDoubleAggregate_hw_p.loadService("rosparam")
ConveyorPortDoubleAggregate_hw_p.rosparam.getAll()
ConveyorPortDoubleAggregate_hw_p.configure()

// Conveyor double port sum

loadComponent("ConveyorPortDoubleSum","PortDoubleSum")
ConveyorPortDoubleSum.loadService("rosparam")
ConveyorPortDoubleSum.rosparam.getAll()
ConveyorPortDoubleSum.configure()

// ConveyorM2J

loadComponent("ConveyorM2J","ConveyorM2J")
ConveyorM2J.configure()


loadComponent("ConveyorIM2RM","IM2RM") 
ConveyorIM2RM.loadService("rosparam") 
ConveyorIM2RM.rosparam.getAll() 
ConveyorIM2RM.rosparam.getParam("~/ConveyorMotorParameters/enc_res", "enc_res") 
ConveyorIM2RM.configure() 


// ConveyorJ2M

loadComponent("ConveyorJ2M","ConveyorJ2M")
ConveyorJ2M.configure()


// ConveyorSplineTrajectoryGeneratorJoint

loadComponent("ConveyorSplineTrajectoryGeneratorJoint", "InternalSpaceSplineTrajectoryGenerator")
ConveyorSplineTrajectoryGeneratorJoint.loadService("rosparam");
ConveyorSplineTrajectoryGeneratorJoint.rosparam.getAll();
ConveyorSplineTrajectoryGeneratorJoint.configure()


// ConveyorSplineTrajectoryGeneratorMotor

loadComponent("ConveyorSplineTrajectoryGeneratorMotor", "InternalSpaceSplineTrajectoryGenerator")
ConveyorSplineTrajectoryGeneratorMotor.loadService("rosparam");
ConveyorSplineTrajectoryGeneratorMotor.rosparam.getAll();
ConveyorSplineTrajectoryGeneratorMotor.configure()



//
// ConveyorSplineTrajectoryActionJoint
// 

loadComponent("ConveyorSplineTrajectoryActionJoint", "InternalSpaceSplineTrajectoryAction")
setActivity("ConveyorSplineTrajectoryActionJoint",0.01 ,2 ,ORO_SCHED_RT)
ConveyorSplineTrajectoryActionJoint.loadService("rosparam");
ConveyorSplineTrajectoryActionJoint.rosparam.getAll();
ConveyorSplineTrajectoryActionJoint.loadService("actionlib")
ConveyorSplineTrajectoryActionJoint.actionlib.connect("/conveyor/spline_trajectory_action_joint")
ConveyorSplineTrajectoryActionJoint.configure()


//
// ConveyorSplineTrajectoryActionMotor
// 

loadComponent("ConveyorSplineTrajectoryActionMotor", "InternalSpaceSplineTrajectoryAction")
setActivity("ConveyorSplineTrajectoryActionMotor",0.01 ,2 ,ORO_SCHED_RT)
ConveyorSplineTrajectoryActionMotor.loadService("rosparam");
ConveyorSplineTrajectoryActionMotor.rosparam.getAll();
ConveyorSplineTrajectoryActionMotor.rosparam.getParam("~/ConveyorMotorParameters/upper_limits", "upper_limits")
ConveyorSplineTrajectoryActionMotor.rosparam.getParam("~/ConveyorMotorParameters/lower_limits", "lower_limits")
ConveyorSplineTrajectoryActionMotor.loadService("actionlib")
ConveyorSplineTrajectoryActionMotor.actionlib.connect("/conveyor/spline_trajectory_action_motor")
ConveyorSplineTrajectoryActionMotor.configure()


loadComponent("ConveyorJntPub", "JointStatePublisher");
setActivity("ConveyorJntPub", 0.01, 2, ORO_SCHED_RT);
ConveyorJntPub.loadService("rosparam");
ConveyorJntPub.rosparam.getAll();
ConveyorJntPub.configure()


//
//
//               CONNECT COMPONENTS
//
//


connect("ConvDiag.SynchroStateIn","ConvSupervisor.IsSynchronisedOut", ConnPolicy())
connect("ConvDiag.HardwaPanicIn","ConvSupervisor.IsHardwarePanicOut", ConnPolicy())
connect("ConvDiag.HardwaBusyIn","ConvSupervisor.IsHardwareBusyOut", ConnPolicy())

connect("ConvSupervisor.DoSynchroHiMwOut",Conv_hi_component()+".DoSynchroIn", ConnPolicy())
connect("ConvSupervisor.EmergencyStopHiMwOut",Conv_hi_component()+".EmergencyStopIn", ConnPolicy())
connect("ConvSupervisor.IsSynchronisedHiMwIn",Conv_hi_component()+".IsSynchronised", ConnPolicy())
connect("ConvSupervisor.IsHardwarePanicHiMwIn",Conv_hi_component()+".IsHardwarePanic", ConnPolicy())


connect("ConveyorM2J.JointPosition","ConveyorSplineTrajectoryGeneratorJoint.JointPosition", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorJoint.JointPositionCommand","ConveyorJ2M.JointPosition", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorJoint.IsSynchronisedIn",Conv_hi_component()+".IsSynchronised", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorJoint.GeneratorActiveOut","ConvSupervisor.GeneratorActiveIn", ConnPolicy())
connect("ConveyorLimitDetector.OutputPort","ConveyorPortDoubleSplit_hw_cp.InputPort", ConnPolicy())
connect("ConveyorPortDoubleAggregate_hw_p.OutputPort","ConveyorIM2RM.IncrementalMotorPosition", ConnPolicy())
connect("ConveyorIM2RM.RadianMotorPosition","ConveyorSplineTrajectoryGeneratorMotor.JointPosition", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorMotor.JointPositionCommand","ConveyorLimitDetector.InputPort", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorMotor.IsSynchronisedIn",Conv_hi_component()+".IsSynchronised", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorMotor.GeneratorActiveOut","ConvSupervisor.GeneratorActiveIn", ConnPolicy())





connect("ConveyorPortDoubleSum.InputPort_0","ConveyorRegulator.ComputedCurrentOut", ConnPolicy())
connect(Conv_hi_component()+".computedReg_in_conveyor","ConveyorPortDoubleSum.OutputPort", ConnPolicy())
connect("ConveyorRegulator.DesiredPosition",Conv_hi_component()+".DesiredPosition_out_conveyor", ConnPolicy())
connect("ConveyorRegulator.MeasuredPosition",Conv_hi_component()+".MotorPosition_conveyor", ConnPolicy())
connect("ConveyorRegulator.ResetSignalIn",Conv_hi_component()+".RegulatorResetOutput_conveyor", ConnPolicy())
connect("ConveyorRegulator.SynchroStateIn",Conv_hi_component()+".IsSynchronised", ConnPolicy())
connect("ConveyorRegulator.EmergencyStopOut","ConvSupervisor.EmergencyStopIn", ConnPolicy())






connect("ConveyorIM2RM.RadianMotorPosition","ConveyorM2J.MotorPosition", ConnPolicy())
connect("ConveyorJ2M.MotorPosition", "ConveyorLimitDetector.InputPort", ConnPolicy())
connect("ConveyorPortDoubleSplit_hw_cp.OutputPort_0","ConveyorRegulator.DesiredPosition", ConnPolicy())
connect("ConveyorPortDoubleAggregate_hw_p.InputPort_0",Conv_hi_component()+".MotorPosition_conveyor", ConnPolicy())

connect("ConveyorSplineTrajectoryActionJoint.trajectoryPtr","ConveyorSplineTrajectoryGeneratorJoint.trajectoryPtr", ConnPolicy())
connect("ConveyorM2J.JointPosition","ConveyorSplineTrajectoryActionJoint.JointPosition", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorJoint.JointPositionCommand","ConveyorSplineTrajectoryActionJoint.JointPositionCommand", ConnPolicy())


connect("ConveyorSplineTrajectoryActionMotor.trajectoryPtr","ConveyorSplineTrajectoryGeneratorMotor.trajectoryPtr", ConnPolicy())
connect("ConveyorIM2RM.RadianMotorPosition","ConveyorSplineTrajectoryActionMotor.JointPosition", ConnPolicy())
connect("ConveyorSplineTrajectoryGeneratorMotor.JointPositionCommand","ConveyorSplineTrajectoryActionMotor.JointPositionCommand", ConnPolicy())

connect("ConveyorM2J.JointPosition", "ConveyorJntPub.JointPosition", ConnPolicy());
connect("ConveyorM2J.JointPosition", "ConveyorJntPub.JointVelocity", ConnPolicy());
connect("ConveyorM2J.JointPosition", "ConveyorJntPub.JointEffort", ConnPolicy());


//
//
// 	    STREAM PORTS
//
//


stream("ConvSupervisor.DoSynchroIn", ros.comm.topic("/conv_supervisor/do_synchro_in"))
stream("ConvSupervisor.EmergencyStopIn", ros.comm.topic("/conv_supervisor/emergency_stop_in"))

stream("ConvDiag.Diagnostics", ros.comm.topic("/diagnostics"));
stream("ConveyorJntPub.joint_state", ros.comm.topic("conveyor/joint_states"));


//
//
//           ADD PER
//
//



addPeer("ConvScheme", Conv_hi_component())
addPeer("ConvScheme", "ConveyorIM2RM");
addPeer("ConvScheme", "ConveyorRegulator");
addPeer("ConvScheme", "ConveyorPortDoubleSplit_hw_cp")
addPeer("ConvScheme", "ConveyorPortDoubleAggregate_hw_p")
addPeer("ConvScheme", "ConveyorLimitDetector")
addPeer("ConvScheme", "ConveyorPortDoubleSum")
addPeer("ConvScheme", "ConveyorM2J");
addPeer("ConvScheme", "ConveyorJ2M");
addPeer("ConvScheme", "ConveyorSplineTrajectoryGeneratorJoint");
addPeer("ConvScheme", "ConveyorSplineTrajectoryGeneratorMotor");




//
//
//              ADD BLOCK
//
//


ConvScheme.addBlock(Conv_hi_component());
ConvScheme.addBlock("ConveyorIM2RM");
ConvScheme.addBlock("ConveyorRegulator")
ConvScheme.addBlock("ConveyorPortDoubleSplit_hw_cp")
ConvScheme.addBlock("ConveyorLimitDetector")
ConvScheme.addBlock("ConveyorPortDoubleAggregate_hw_p")
ConvScheme.addBlock("ConveyorPortDoubleSum")
ConvScheme.addBlock("ConveyorM2J");
ConvScheme.addBlock("ConveyorJ2M");
ConvScheme.addBlock("ConveyorSplineTrajectoryGeneratorJoint");
ConvScheme.addBlock("ConveyorSplineTrajectoryGeneratorMotor");



//
//
//         LATCH CONNECTIONS
//
//


ConvScheme.latchConnections(Conv_hi_component(), "ConveyorRegulator", true);
ConvScheme.latchConnections(Conv_hi_component(), "ConveyorPortDoubleAggregate_hw_p", true);
ConvScheme.latchConnections(Conv_hi_component(), "ConveyorSplineTrajectoryGeneratorJoint", true);
ConvScheme.latchConnections(Conv_hi_component(), "ConveyorSplineTrajectoryGeneratorMotor", true);






//
//
//          START COMPONENTS
//
//



ConveyorRegulator.start()
ConveyorPortDoubleSplit_hw_cp.start()
ConveyorLimitDetector.start()
ConveyorPortDoubleAggregate_hw_p.start()
ConveyorPortDoubleSum.start()
ConveyorIM2RM.start()
ConveyorM2J.start()
ConveyorJ2M.start()
ConveyorSplineTrajectoryActionJoint.start()
ConveyorSplineTrajectoryActionMotor.start()
ConveyorJntPub.start()
ConvDiag.start()

